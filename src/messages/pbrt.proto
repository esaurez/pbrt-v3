syntax = 'proto3';

package pbrt.protobuf;

message Point2f {
    float x = 1;
    float y = 2;
}

message Point2i {
    int32 x = 1;
    int32 y = 2;
}

message Point3f {
    float x = 1;
    float y = 2;
    float z = 3;
}

message Vector2f {
    float x = 1;
    float y = 2;
}

message Vector3f {
    float x = 1;
    float y = 2;
    float z = 3;
}

message Normal3f {
    float x = 1;
    float y = 2;
    float z = 3;
}

message Matrix {
    repeated float m = 1;
}

message AnimatedTransform {
    Matrix start_transform = 1;
    Matrix end_transform = 2;
    float start_time = 3;
    float end_time = 4;
}

message Bounds2i {
    Point2i point_min = 1;
    Point2i point_max = 2;
}

message Bounds2f {
    Point2f point_min = 1;
    Point2f point_max = 2;
}

message Bounds3f {
    Point3f point_min = 1;
    Point3f point_max = 2;
}

message TransformedPrimitive {
    AnimatedTransform transform = 1;
    int64 root_ref = 2;
}

// Shapes

message TriangleMesh {
    int32 n_triangles = 1;
    int32 n_vertices = 2;
    repeated int32 vertex_indices = 3;
    repeated Point3f p = 4;
    repeated Normal3f n = 5;  // Normal3f
    repeated Vector3f s = 6;  // Vector3f
    repeated Point2f uv = 7;
    int64 material_id = 8;
    int64 id = 9;
}

message Triangle {
    int64 mesh_id = 1;
    int64 tri_number = 2;
}

message BVHNode {
    Bounds3f bounds = 1;
    int64 left_ref = 2;
    int64 right_ref = 3;
    uint32 axis = 4;

    repeated TransformedPrimitive transformed_primitives = 7;
    repeated Triangle triangles = 8;
}

message RGBSpectrum {
    repeated float c = 1;
}

// ParamSet

message ParamSet {
    // clang-format off
    message ItemBool     { string name = 1; repeated bool values = 2; }
    message ItemInt      { string name = 1; repeated int32 values = 2; }
    message ItemFloat    { string name = 1; repeated float values = 2; }
    message ItemPoint2f  { string name = 1; repeated Point2f values = 2; }
    message ItemVector2f { string name = 1; repeated Vector2f values = 2; }
    message ItemPoint3f  { string name = 1; repeated Point3f values = 2; }
    message ItemVector3f { string name = 1; repeated Vector3f values = 2; }
    message ItemNormal3f { string name = 1; repeated Normal3f values = 2; }
    message ItemSpectrum { string name = 1; repeated RGBSpectrum values = 2; }
    message ItemString   { string name = 1; repeated string values = 2; }
    // clang-format on

    repeated ItemBool bools = 1;
    repeated ItemInt ints = 2;
    repeated ItemFloat floats = 3;
    repeated ItemPoint2f point2fs = 4;
    repeated ItemVector2f vector2fs = 5;
    repeated ItemPoint3f point3fs = 6;
    repeated ItemVector3f vector3fs = 7;
    repeated ItemNormal3f normals = 8;
    repeated ItemSpectrum spectra = 9;
    repeated ItemString strings = 10;
    repeated ItemString textures = 11;
}

// Sampler

message Sampler {
    string name = 1;
    ParamSet paramset = 2;
    Bounds2i sample_bounds = 3;
}

// Lights

message Light {
    string name = 1;
    ParamSet paramset = 2;
    Matrix light_to_world = 3;
}

// Camera, Film & Filter

message Camera {
    message Film {
        message Filter {
            string name = 1;
            ParamSet paramset = 2;
        }

        string name = 1;
        ParamSet paramset = 2;
        Filter filter = 3;
    }

    string name = 1;
    ParamSet paramset = 2;
    AnimatedTransform camera_to_world = 3;
    Film film = 6;
}

// Samples

message SampleData {
    Point2f p_film = 1;
    float weight = 2;
}

// Scene

message Scene {
    Bounds3f world_bound = 1;
}

// LambdaCommands

message InvocationPayload {
    string storage_backend = 1;
    string coordinator = 2;
    int32 samples_per_pixel = 3;
    int32 max_path_depth = 4;
    float ray_log_rate = 5;
    float bag_log_rate = 6;
    bool directional_treelets = 7;
    repeated string memcached_servers = 8;
}

message ObjectKey {
    uint32 type = 1;
    uint64 id = 2;
};

message Hey {
    uint64 worker_id = 1;
    string job_id = 2;
}

message GetObjects {
    repeated ObjectKey object_ids = 1;
}

message GenerateRays {
    Bounds2i crop_window = 1;
}

// Materials & Textures
message TextureParams {
    ParamSet geom_params = 1;
    ParamSet material_params = 2;
    map<string, int32> float_textures = 3;
    map<string, int32> spectrum_textures = 4;
}

// Materials

message Material {
    string name = 1;
    TextureParams texture_params = 2;
}

// Textures

message FloatTexture {
    string name = 1;
    Matrix tex2world = 2;
    TextureParams texture_params = 3;
}

message SpectrumTexture {
    string name = 1;
    Matrix tex2world = 2;
    TextureParams texture_params = 3;
}

// Manifest

message Manifest {
    message Object {
        ObjectKey id = 1;
        repeated ObjectKey dependencies = 2;
        uint64 size = 3;
    };
    repeated Object objects = 1;
}

// Job Summary

message JobSummary {
    double total_time = 1;
    double generation_time = 2;
    double tracing_time = 3;
    uint32 num_lambdas = 4;
    uint64 total_paths = 5;
    uint64 finished_paths = 6;
    uint64 finished_rays = 7;
    uint64 num_enqueues = 8;
    double ray_throughput = 9;
    uint64 total_upload = 10;
    uint64 total_download = 11;
    uint64 total_samples = 12;
    double estimated_cost = 13;
}

// Ray Bags

message RayBagInfo {
    bool tracked = 1;
    uint64 worker_id = 2;
    uint32 treelet_id = 3;
    uint64 bag_id = 4;
    uint64 ray_count = 5;
    uint64 bag_size = 6;
    bool sample_bag = 7;
}

message RayBags {
    uint64 rays_generated = 1;
    uint64 rays_terminated = 2;

    repeated RayBagInfo items = 3;
}

message WorkerStats {
    uint64 finished_paths = 1;
}

// Benchmarking

message BenchmarkRequest {
    uint64 worker_id = 1;
    string storage_uri = 2;
    uint64 bag_size = 3;
    uint32 threads = 4;
    uint32 duration = 5;
    uint32 send = 6;
    uint32 recv = 7;
    repeated string memcached_servers = 8;
}

message BenchmarkResponse {
    string output = 1;
    string error = 2;
    string command = 3;
    int32 retcode = 4;
}

message HistogramUInt64 {
    uint64 width = 1;
    uint64 lower_bound = 2;
    uint64 upper_bound = 3;

    repeated uint64 bins = 4;

    uint64 count = 5;
    uint64 min = 6;
    uint64 max = 7;
    uint64 sum = 8;
    uint64 squares_sum = 9;
}

message JobStatus {
    string url_prefix = 1;
    uint64 next_sample_index = 2;
    repeated string sample_bags = 3;
}

message CategoryInfo {
    string title = 1;
    uint64 total_us = 2;
    double percentage = 3;
    uint64 max_us = 4;
    uint64 count = 5;
}

message TimeLog {
    uint64 total = 1;
    repeated CategoryInfo categories = 2;
    CategoryInfo unaccounted = 3;
}
